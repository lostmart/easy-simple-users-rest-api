{
	"info": {
		"_postman_id": "02b5232e-4f3d-4c9f-9243-f3c2048949d0",
		"name": "REST API basics: CRUD operations",
		"description": "# üöÄ User API with SQLite - Postman Collection\n\nThis collection guides you through testing a Node.js REST API for user management with SQLite database, including authentication and avatar generation features.\n\n## üîê Authentication Required\n\n### **Important**: All endpoints require an API key in the headers!\n\n- Header name: `my_key`\n    \n- Value: Your API key from environment variables\n    \n\n## üîñ How to use this collection\n\n### **Step 1: Set up Environment Variables**\n\nBefore testing, create a Postman environment with:\n\n- `base_url`: Your Render deployment URL (e.g., `https://your-app.onrender.com`)\n    \n- `api_key`: Your secret API key value\n    \n\n### **Step 2: Test Authentication**\n\nStart with the health check endpoint to verify your API key works:\n\n- **GET** `/api/health` - Should return server status if authenticated\n    \n\n### **Step 3: CRUD Operations**\n\nThis API supports full CRUD operations for user management:\n\n#### **GET Requests**\n\n- **GET** `/api/users` - Retrieve all users with their auto-generated avatars\n    \n- **GET** `/api/users/:id` - Get a specific user by ID\n    \n\n#### **POST Request**\n\n- **POST** `/api/users` - Create a new user  \n    \n    - Automatically generates avatar based on gender\n        \n    - Required fields: `name`, `email`\n        \n    - Optional fields: `age`, `gender` (for avatar assignment)\n        \n\n#### **PUT Request**\n\n- **PUT** `/api/users/:id` - Update existing user data  \n    \n    - Can update name, email, age\n        \n    - Avatar persists unless refreshed\n        \n\n#### **DELETE Request**\n\n- **DELETE** `/api/users/:id` - Remove a user from the database\n    \n\n### **Step 4: View Responses**\n\nObserve the response tab for:\n\n- Status codes (200 OK, 201 Created, 401 Unauthorized, etc.)\n    \n- Response time and size\n    \n- JSON structure with `message` and `data` fields",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20546514"
	},
	"item": [
		{
			"name": "welcome message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "get all users",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "my_key",
						"value": "my_super_secret_phrase",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get one user by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "my_key",
						"value": "my_super_secret_phrase",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://template.postman-echo.com"
		}
	]
}